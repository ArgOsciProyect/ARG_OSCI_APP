name: Flutter Test

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - '**'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.pub-cache
          /opt/hostedtoolcache/flutter
        key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}
        restore-keys: |
          ${{ runner.os }}-flutter-

    - name: Set up Flutter
      if: steps.flutter-cache.outputs.cache-hit != 'true'
      uses: subosito/flutter-action@v2
      with:
        channel: stable
        
    - name: Dart version
      run: dart --version

    - name: Flutter version
      run: flutter --version

    - name: Flutter doctor
      run: flutter doctor

    - name: Install dependencies
      run: flutter pub get

    - name: Format Dart code
      run: dart format .

    - name: Check for formatting changes
      id: git-check
      run: |
        git diff --exit-code || echo "changes"

    - name: Commit formatted code
      if: steps.git-check.outputs.stdout != 'No changes'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        git commit -m "chore: formatear c√≥digo con dart format" || echo "No changes to commit"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Run tests with coverage
      run: |
        flutter test --coverage
        # Generate lcov report
        genhtml coverage/lcov.info -o coverage/html

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

    - name: Upload Coverage Report as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage/html

    # Optional: Enforce Coverage Threshold
    - name: Enforce Coverage Threshold
      run: |
        COVERAGE=$(grep -oP '\d+\.\d+' coverage/lcov.info | awk '{s+=$1} END {print s/NR}')
        echo "Total Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 40" | bc -l) )); then
          echo "Coverage is below 40%"
          exit 1
        fi
      shell: bash