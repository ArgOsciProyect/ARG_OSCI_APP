name: Linux Build

on:
  release:
    types: [created]

permissions:
  contents: write
  packages: write

jobs:
  build-linux:
    name: üêß Build Linux App
    # Usar una versi√≥n espec√≠fica y m√°s antigua de Ubuntu para mayor compatibilidad
    runs-on: ubuntu-20.04
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v3
      
      - name: üéØ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: stable
          
      - name: üì¶ Install dependencies
        run: flutter pub get
        
      - name: üîß Enable linux build
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
          flutter config --enable-linux-desktop
        
      - name: üèóÔ∏è Build Linux
        run: flutter build linux --release
        
      - name: üì¶ Package as tar.gz
        run: |
          cd build/linux/x64/release/bundle
          tar -czvf ../../../../../linux-app.tar.gz .
          cd ../../../../../
          
      - name: üì§ Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-app-tar
          path: linux-app.tar.gz

  appimage-package:
    name: üì¶ Build AppImage Package
    needs: build-linux
    # Usar la misma versi√≥n de Ubuntu m√°s antigua
    runs-on: ubuntu-20.04
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v3
      
      - name: üì• Download built application
        uses: actions/download-artifact@v4
        with:
          name: linux-app-tar
      
      - name: üîß Install AppImage tools
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2 wget libglib2.0-0 libgtk-3-0
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool
          chmod +x appimagetool
      
      - name: üì¶ Extract application
        run: |
          mkdir -p app-contents
          tar -xzvf linux-app.tar.gz -C app-contents
          
          # List all files for detailed debugging
          echo "All files in app-contents:"
          find app-contents -type f | sort
          
          # Find all executables for better diagnosis
          echo "All executable files:"
          find app-contents -type f -executable | sort
          
          # Determine executable name from pubspec.yaml
          if [ -f "pubspec.yaml" ]; then
            PROJECT_NAME=$(grep "name:" pubspec.yaml | head -1 | awk '{print $2}' | tr -d "'\"")
            echo "Project name from pubspec: $PROJECT_NAME"
          else
            PROJECT_NAME="arg_osci_app" # Default fallback
            echo "Using default project name: $PROJECT_NAME"
          fi
          
          # Try to find the executable based on multiple strategies
          # Strategy 1: Direct match with project name
          EXEC_FILE=$(find app-contents -type f -executable -name "$PROJECT_NAME" | head -1)
          
          # Strategy 2: Any executable in 'lib' directory
          if [ -z "$EXEC_FILE" ]; then
            EXEC_FILE=$(find app-contents/lib -type f -executable 2>/dev/null | head -1)
          fi
          
          # Strategy 3: Any executable
          if [ -z "$EXEC_FILE" ]; then
            EXEC_FILE=$(find app-contents -type f -executable | head -1)
          fi
          
          if [ -z "$EXEC_FILE" ]; then
            echo "No executable found, using project name as fallback"
            EXEC_NAME="$PROJECT_NAME"
          else
            echo "Executable found: $EXEC_FILE"
            EXEC_NAME=$(basename "$EXEC_FILE")
          fi
          
          echo "EXEC_NAME=$EXEC_NAME" >> $GITHUB_ENV
      
      - name: üèóÔ∏è Build AppImage
        run: |
          APP_NAME="arg-osci"
          APP_VERSION="${{ github.ref_name }}"
          APP_VERSION=${APP_VERSION#v}
          echo "Using version: $APP_VERSION"

          # Create AppDir structure
          mkdir -p AppDir/usr/{bin,lib/$APP_NAME,share/{applications,icons/hicolor/128x128/apps}}

          # Copy application files - don't copy system libraries to AppDir/usr/lib/x86_64-linux-gnu
          cp -r app-contents/* AppDir/usr/lib/$APP_NAME/

          # Show executable files for debugging
          echo "Executable files found in app directory:"
          find AppDir/usr/lib/$APP_NAME -type f -executable
          
          # Don't copy external libraries, use system libraries instead
          # for better compatibility with older systems
          
          # Use EXEC_NAME environment variable we set earlier
          echo "Using executable: ${{ env.EXEC_NAME }}"

          # Create launcher script with improved error handling
          cat > AppDir/usr/bin/$APP_NAME << EOF
          #!/bin/bash
          # Execute with error handling
          if [ -f "/usr/lib/$APP_NAME/${{ env.EXEC_NAME }}" ]; then
            exec /usr/lib/$APP_NAME/${{ env.EXEC_NAME }} "\$@"
          else
            echo "Error: Executable not found at /usr/lib/$APP_NAME/${{ env.EXEC_NAME }}"
            echo "Attempting to find alternative executable..."
            ALT_EXEC=\$(find /usr/lib/$APP_NAME -type f -executable | head -1)
            if [ -n "\$ALT_EXEC" ]; then
              echo "Found alternative: \$ALT_EXEC"
              exec "\$ALT_EXEC" "\$@"
            else
              echo "No executable found. Installation may be corrupted."
              exit 1
            fi
          fi
          EOF
          chmod +x AppDir/usr/bin/$APP_NAME
          
          # Extract icon name from path and copy the icon
          cp lib/assets/icons/ARG_OSCI_ICON.png AppDir/usr/share/icons/hicolor/128x128/apps/$APP_NAME.png || echo "Warning: Icon not found"
          
          # Create desktop file - must be in root and be named exactly as AppImageTool expects
          cat > AppDir/$APP_NAME.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=ARG OSCI
          GenericName=Oscilloscope
          Comment=Oscilloscope Visualization Tool
          Exec=$APP_NAME
          Icon=$APP_NAME
          Terminal=false
          Categories=Science;Education;
          EOF
          
          # Copy desktop file to standard locations
          cp AppDir/$APP_NAME.desktop AppDir/usr/share/applications/
          
          # Create AppRun file (entry point) with improved library path handling
          # Use system libraries instead of bundled ones for compatibility
          cat > AppDir/AppRun << EOF
          #!/bin/bash
          APPDIR="\$(dirname "\$(readlink -f "\${0}")")"
          export PATH="\${APPDIR}/usr/bin:\${PATH}"
          
          # Execute
          exec "\${APPDIR}/usr/bin/$APP_NAME" "\$@"
          EOF
          chmod +x AppDir/AppRun
          
          # Link the icon to root for AppImage to find it
          ln -sf usr/share/icons/hicolor/128x128/apps/$APP_NAME.png AppDir/$APP_NAME.png
          
          # List files for debugging
          echo "Content of AppDir:"
          find AppDir -type f | sort
          
          # Create the AppImage with the correct environment
          ARCH=x86_64 ./appimagetool --no-appstream AppDir "${APP_NAME}-${APP_VERSION}-x86_64.AppImage"
      
      - name: üì§ Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: appimage-package
          path: '*.AppImage'
  deb-package:
    name: üì¶ Build DEB Package
    needs: build-linux
    # Usar la misma versi√≥n de Ubuntu m√°s antigua
    runs-on: ubuntu-20.04
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v3
      
      - name: üì• Download built application
        uses: actions/download-artifact@v4
        with:
          name: linux-app-tar
          
      - name: üîß Install FPM
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev rubygems build-essential
          sudo gem install --no-document fpm
          
      - name: üì¶ Extract application
        run: |
          mkdir -p app-contents
          tar -xzvf linux-app.tar.gz -C app-contents
          
          # Find the executable file with more comprehensive search
          echo "Looking for executables in app-contents:"
          find app-contents -type f -executable | sort
          
          # Try to determine the executable name from pubspec
          if [ -f "pubspec.yaml" ]; then
            PROJECT_NAME=$(grep "name:" pubspec.yaml | head -1 | awk '{print $2}' | tr -d "'\"")
            echo "Project name from pubspec: $PROJECT_NAME"
          else
            PROJECT_NAME="arg_osci_app"
            echo "Using default project name: $PROJECT_NAME"
          fi
          
          # First try by project name
          EXEC_FILE=$(find app-contents -type f -executable -name "$PROJECT_NAME" | head -1)
          
          # Fall back to any executable
          if [ -z "$EXEC_FILE" ]; then
            EXEC_FILE=$(find app-contents -type f -executable | head -1)
          fi
          
          if [ -z "$EXEC_FILE" ]; then
            echo "No executable found, using project name as fallback"
            EXEC_NAME="$PROJECT_NAME"
          else
            echo "Executable found: $EXEC_FILE"
            EXEC_NAME=$(basename "$EXEC_FILE")
          fi
          
          echo "EXEC_NAME=$EXEC_NAME" >> $GITHUB_ENV
          
      - name: üèóÔ∏è Build .deb package
        run: |
          APP_NAME="arg-osci"
          APP_VERSION="${{ github.ref_name }}"
          APP_VERSION=${APP_VERSION#v}
          echo "Using version: $APP_VERSION"
          APP_DESCRIPTION="ARG OSCI Flutter application for oscilloscope visualization"
          
          mkdir -p debian-package/usr/{bin,lib/$APP_NAME,share/{applications,icons/hicolor/128x128/apps}}
          
          cp -r app-contents/* debian-package/usr/lib/$APP_NAME/
          cp lib/assets/icons/ARG_OSCI_ICON.png debian-package/usr/share/icons/hicolor/128x128/apps/$APP_NAME.png || echo "Warning: Icon not found"
          
          # Create improved launcher script with fallback
          cat > debian-package/usr/bin/$APP_NAME << EOF
          #!/bin/bash
          if [ -f "/usr/lib/$APP_NAME/${{ env.EXEC_NAME }}" ]; then
            exec /usr/lib/$APP_NAME/${{ env.EXEC_NAME }} "\$@"
          else
            echo "Error: Executable not found at /usr/lib/$APP_NAME/${{ env.EXEC_NAME }}"
            echo "Trying to find alternative executable..."
            ALT_EXEC=\$(find /usr/lib/$APP_NAME -type f -executable | head -1)
            if [ -n "\$ALT_EXEC" ]; then
              echo "Found alternative: \$ALT_EXEC"
              exec "\$ALT_EXEC" "\$@"
            else
              echo "No executable found. Installation may be corrupted."
              exit 1
            fi
          fi
          EOF
          chmod +x debian-package/usr/bin/$APP_NAME
          
          cat > debian-package/usr/share/applications/$APP_NAME.desktop << EOF
          [Desktop Entry]
          Name=ARG OSCI
          Exec=$APP_NAME
          Icon=$APP_NAME
          Type=Application
          Categories=Science;Education;
          Comment=Oscilloscope Visualization Tool
          EOF
          
          # Especificar versiones m√°s espec√≠ficas y compatibles de las dependencias
          fpm -s dir -t deb -C debian-package \
            --name $APP_NAME \
            --version $APP_VERSION \
            --architecture amd64 \
            --description "$APP_DESCRIPTION" \
            --depends "libgtk-3-0 (>= 3.22.0)" \
            --depends "libglib2.0-0 (>= 2.50.0)" \
            --depends "liblzma5" \
            --depends "libc6 (>= 2.27)" \
            --depends "libstdc++6 (>= 8.0.0)" \
            .
            
      - name: üì§ Upload .deb package
        uses: actions/upload-artifact@v4
        with:
          name: deb-package
          path: '*.deb'

  rpm-package:
    name: üì¶ Build RPM Package
    needs: build-linux
    # Usar la misma versi√≥n de Ubuntu m√°s antigua
    runs-on: ubuntu-20.04
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v3
      
      - name: üì• Download built application
        uses: actions/download-artifact@v4
        with:
          name: linux-app-tar
          
      - name: üîß Install FPM
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev rubygems build-essential rpm
          sudo gem install --no-document fpm
          
      - name: üì¶ Extract application
        run: |
          mkdir -p app-contents
          tar -xzvf linux-app.tar.gz -C app-contents
          
          # Find the executable file with more comprehensive search
          echo "Looking for executables in app-contents:"
          find app-contents -type f -executable | sort
          
          # Try to determine the executable name from pubspec
          if [ -f "pubspec.yaml" ]; then
            PROJECT_NAME=$(grep "name:" pubspec.yaml | head -1 | awk '{print $2}' | tr -d "'\"")
            echo "Project name from pubspec: $PROJECT_NAME"
          else
            PROJECT_NAME="arg_osci_app"
            echo "Using default project name: $PROJECT_NAME"
          fi
          
          # First try by project name
          EXEC_FILE=$(find app-contents -type f -executable -name "$PROJECT_NAME" | head -1)
          
          # Fall back to any executable
          if [ -z "$EXEC_FILE" ]; then
            EXEC_FILE=$(find app-contents -type f -executable | head -1)
          fi
          
          if [ -z "$EXEC_FILE" ]; then
            echo "No executable found, using project name as fallback"
            EXEC_NAME="$PROJECT_NAME"
          else
            echo "Executable found: $EXEC_FILE"
            EXEC_NAME=$(basename "$EXEC_FILE")
          fi
          
          echo "EXEC_NAME=$EXEC_NAME" >> $GITHUB_ENV
          
      - name: üèóÔ∏è Build .rpm package
        run: |
          APP_NAME="arg-osci"
          APP_VERSION="${{ github.ref_name }}"
          APP_VERSION=${APP_VERSION#v}
          echo "Using version: $APP_VERSION"
          APP_DESCRIPTION="ARG OSCI Flutter application for oscilloscope visualization"
          
          mkdir -p rpm-package/usr/{bin,lib/$APP_NAME,share/{applications,icons/hicolor/128x128/apps}}
          
          cp -r app-contents/* rpm-package/usr/lib/$APP_NAME/
          cp lib/assets/icons/ARG_OSCI_ICON.png rpm-package/usr/share/icons/hicolor/128x128/apps/$APP_NAME.png || echo "Warning: Icon not found"
          
          # Create improved launcher script with fallback
          cat > rpm-package/usr/bin/$APP_NAME << EOF
          #!/bin/bash
          if [ -f "/usr/lib/$APP_NAME/${{ env.EXEC_NAME }}" ]; then
            exec /usr/lib/$APP_NAME/${{ env.EXEC_NAME }} "\$@"
          else
            echo "Error: Executable not found at /usr/lib/$APP_NAME/${{ env.EXEC_NAME }}"
            echo "Trying to find alternative executable..."
            ALT_EXEC=\$(find /usr/lib/$APP_NAME -type f -executable | head -1)
            if [ -n "\$ALT_EXEC" ]; then
              echo "Found alternative: \$ALT_EXEC"
              exec "\$ALT_EXEC" "\$@"
            else
              echo "No executable found. Installation may be corrupted."
              exit 1
            fi
          fi
          EOF
          chmod +x rpm-package/usr/bin/$APP_NAME
          
          cat > rpm-package/usr/share/applications/$APP_NAME.desktop << EOF
          [Desktop Entry]
          Name=ARG OSCI
          Exec=$APP_NAME
          Icon=$APP_NAME
          Type=Application
          Categories=Science;Education;
          Comment=Oscilloscope Visualization Tool
          EOF
          
          # Ajustar las versiones de las dependencias para mayor compatibilidad
          fpm -s dir -t rpm -C rpm-package \
            --name $APP_NAME \
            --version $APP_VERSION \
            --architecture x86_64 \
            --description "$APP_DESCRIPTION" \
            --depends "gtk3 >= 3.22.0" \
            --depends "glib2 >= 2.50.0" \
            --depends "xz-libs" \
            --depends "glibc >= 2.27" \
            --depends "libstdc++ >= 8.0" \
            .
            
      - name: üì§ Upload .rpm package
        uses: actions/upload-artifact@v4
        with:
          name: rpm-package
          path: '*.rpm'

  create-release:
    name: üì¶ Create Release
    needs: [appimage-package, deb-package, rpm-package]
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    permissions:
      contents: write # Only contents permission needed for releases
    steps:
      - name: üì• Download all packages
        uses: actions/download-artifact@v4
        with:
          path: packages
          
      - name: üöÄ Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            packages/appimage-package/*.AppImage
            packages/deb-package/*.deb
            packages/rpm-package/*.rpm
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}