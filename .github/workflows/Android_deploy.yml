name: Android Build

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [created]

jobs:
  build-android:
    name: ðŸ“± Build Android App
    runs-on: ubuntu-latest
    steps:
      - name: ðŸ“¥ Checkout repository
        uses: actions/checkout@v3

      - name: ðŸŽ¯ Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: ðŸŽ¯ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'
          cache: true

      - name: ðŸ“¥ Get dependencies
        run: flutter pub get

      - name: ðŸ”§ Fix Java home in Gradle
        run: |
          # Create or update gradle.properties to use the correct Java home
          mkdir -p ~/.gradle
          echo "org.gradle.java.home=$JAVA_HOME" > ~/.gradle/gradle.properties
          
          # Display Java and Flutter info for debugging
          echo "Using JAVA_HOME: $JAVA_HOME"
          java -version
          flutter --version
        
      - name: ðŸ”§ Setup Android SDK
        run: flutter config --android-sdk $ANDROID_SDK_ROOT
      
      # Add these new steps here
      - name: ðŸŽ¯ Setup Flutter icons
        run: |
          # Add flutter_launcher_icons package
          flutter pub add --dev flutter_launcher_icons
          
          # Create config file for flutter_launcher_icons
          cat > flutter_launcher_icons.yaml << EOF
          flutter_launcher_icons:
            android: true
            ios: false
            image_path: "lib/assets/icons/ARG_OSCI_ICON.png"
            adaptive_icon_background: "#121212" # Dark background for the icon
            adaptive_icon_foreground: "lib/assets/icons/ARG_OSCI_ICON.png"
          EOF
          
          # Generate icons
          flutter pub run flutter_launcher_icons
      
      - name: ðŸ”§ Update Android Manifest
        run: |
          # Add tools namespace and replace attribute to main AndroidManifest.xml
          if [ -f "android/app/src/main/AndroidManifest.xml" ]; then
            # Add tools namespace if not present
            sed -i '/<manifest/s/xmlns:android="[^"]*"/& xmlns:tools="http:\/\/schemas.android.com\/tools"/' android/app/src/main/AndroidManifest.xml
            
            # Add tools:replace to application tag
            sed -i '/<application/s/android:label="[^"]*"/android:label="ARG OSCI" tools:replace="android:label"/' android/app/src/main/AndroidManifest.xml
          fi
          
          # Update debug AndroidManifest.xml if it exists
          if [ -f "android/app/src/debug/AndroidManifest.xml" ]; then
            # Remove android:label from debug manifest to avoid conflicts
            sed -i '/<application/s/android:label="[^"]*"//' android/app/src/debug/AndroidManifest.xml
          fi
      
          # Verify changes
          echo "Main AndroidManifest.xml:"
          cat android/app/src/main/AndroidManifest.xml
          echo "Debug AndroidManifest.xml:"
          cat android/app/src/debug/AndroidManifest.xml || echo "Debug manifest not found"
      
      # Then continue with your existing steps
      - name: ðŸ”§ Build debug APK (initial)
        run: |
          # Add --no-tree-shake-icons to avoid potential issues
          flutter build apk --debug --no-tree-shake-icons || echo "Initial build expected to fail, continuing..."         
          # Make sure gradlew is executable if it exists
          if [ -f "android/gradlew" ]; then
            chmod +x android/gradlew
          fi
      
      - name: ðŸ”‘ Setup Keystore
        if: github.event_name == 'release'
        run: |
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "HAS_KEYSTORE=true" >> $GITHUB_ENV
            mkdir -p android/app
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
            cat > android/key.properties << EOF
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          storeFile=keystore.jks
          EOF
          else
            echo "HAS_KEYSTORE=false" >> $GITHUB_ENV
          fi

      - name: ðŸ“± Build Debug APK
        if: github.event_name != 'release' || env.HAS_KEYSTORE != 'true'
        run: flutter build apk --debug --no-tree-shake-icons

      - name: ðŸ“± Build Release APK
        if: github.event_name == 'release' && env.HAS_KEYSTORE == 'true'
        run: flutter build apk --release --no-tree-shake-icons

      - name: ðŸ“± Build App Bundle
        if: github.event_name == 'release' && env.HAS_KEYSTORE == 'true'
        run: flutter build appbundle --release

      - name: ðŸ“¤ Upload Debug APK
        if: github.event_name != 'release' || env.HAS_KEYSTORE != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: build/app/outputs/flutter-apk/app-debug.apk

      - name: ðŸ“¤ Upload Release Artifacts
        if: github.event_name == 'release' && env.HAS_KEYSTORE == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: android-release
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab

  create-release:
    name: ðŸ“¦ Create Release
    needs: build-android
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: ðŸ“¥ Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-release
          path: release-artifacts
          continue-on-error: true

      - name: ðŸš€ Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-artifacts/app-release.apk
            release-artifacts/app-release.aab
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}