sequenceDiagram
    participant User as User
    participant UI as User Interface
    participant Setup as SetupService
    participant DataAcquisition as DataAcquisitionService
    participant DeviceConfig as DeviceConfigProvider
    participant Http as HttpService
    participant Device as ESP32 Device
    participant WiFiForIoT as WiFiForIoTPlugin

    User->UI: Opens App
    User->UI: Taps "Select AP Mode" Button
    UI->UI: showAPSelectionDialog()
    UI->UI: Display AP Selection Dialog
    Setup->NetworkInfo: connectWithRetries()
    alt Platform.isAndroid == true
        NetworkInfo->WiFiForIoTPlugin: connect('ESP32_AP', password: 'password123')
        WiFiForIoTPlugin-->>NetworkInfo: Connection Status
    else Platform.isAndroid == false
        NetworkInfo->User: Prompts user to connect manually to ESP32_AP
    end
    NetworkInfo-->>Setup: Connection Status
    Setup->Http: initializeGlobalHttpConfig('http://192.168.4.1:81')
    Setup->Http: get('/config')
    Http->Device: GET /config
    Device-->>Http: Response: Device Configuration (JSON)
    Http-->>Setup: Response data: Device Configuration (JSON)
    Setup->DeviceConfig: updateConfig(DeviceConfig)
    User->UI: Selects AP Mode (External or Internal)
    alt User selects External AP
        UI->Setup: handleExternalAPSelection()
        Setup->Http: get('/get_public_key')
        Http->Device: GET /get_public_key
        Device-->>Http: Response: RSA Public Key (PEM Encoded)
        Http-->>Setup: Response data: RSA Public Key (PEM Encoded)
        Setup->UI: showWiFiNetworkDialog()
        UI->Setup: scanForWiFiNetworks()
        Setup->Http: get('/scan_wifi')
        Device-->>Http: Response: List of WiFi Networks (SSIDs)
        Http-->>Setup: Response data: List of WiFi Networks (SSIDs)
        Setup->UI: Display List of WiFi Networks
        User->UI: Selects WiFi Network
        UI->Setup: askForPassword(selectedSSID)
        User->UI: Enters WiFi Password
        UI->Setup: connectToExternalAP(selectedSSID, password)
        Setup->Setup: encriptWithPublicKey(password)
        Setup->Http: post('/connect_wifi', {SSID: encryptedSSID, Password: encryptedPassword})
        Http->Device: POST /connect_wifi with encrypted credentials
        Device->Device: decrypt_base64_message(encryptedSSID)
        Device->Device: decrypt_base64_message(encryptedPassword)
        Device->WiFi: esp_wifi_set_config(ssid, password)
        Device->WiFi: esp_wifi_connect()
        Device-->>Http: Response: Connection Status (Success/Failure), IP Address, Port
        Http-->>Setup: Response data: Connection Status (Success/Failure), IP Address, Port
        alt Success == true
            Setup->Setup: extIp = response['IP'], extPort = response['Port']
            Setup->Http: initializeGlobalHttpConfig('http://$extIp:80')
            Setup->Http: get('/config')
            Device-->>Http: Response: Device Configuration (JSON)
            Http-->>Setup: Response data: Device Configuration (JSON)
            Setup->DeviceConfig: updateConfig(DeviceConfig)
            Setup->DataAcquisition: fetchData(extIp, extPort)
            DataAcquisition->DataAcquisition: initialize()
            DataAcquisition->DataAcquisition: _initializeFromDeviceConfig()
            DataAcquisition->Http: post('/trigger', data)
            Http->Device: POST /trigger with trigger data: trigger_edge, trigger_percentage
            Device-->>Http: Response: Success or Failure
            Http-->>DataAcquisition: Response data: Success or Failure
            DataAcquisition->DataAcquisition: updateConfig()
        else Success == false
            Setup->UI: Display Connection Error
        end
    else User selects Internal AP
        UI->Setup: handleModeSelection('Internal AP')
        Setup->Http: get('/internal_mode')
        Http->Device: GET /internal_mode
        Device-->>Http: Response: IP Address, Port
        Http-->>Setup: Response data: IP Address, Port
        Setup->Setup: intIp = response['IP'], intPort = response['Port']
        Setup->Http: initializeGlobalHttpConfig('http://$intIp:81')
        Setup->Http: get('/config')
        Http->Device: GET /config
        Device-->>Http: Response: Device Configuration (JSON)
        Http-->>Setup: Response data: Device Configuration (JSON)
        Setup->DeviceConfig: updateConfig(DeviceConfig)
        Setup->DataAcquisition: fetchData(intIp, intPort)
        DataAcquisition->DataAcquisition: initialize()
        DataAcquisition->DataAcquisition: _initializeFromDeviceConfig()
        DataAcquisition->Http: post('/trigger', data)
        Http->Device: POST /trigger with trigger data: trigger_edge, trigger_percentage
        Device-->>Http: Response: Success or Failure
        Http-->>DataAcquisition: Response data: Success or Failure
        DataAcquisition->DataAcquisition: updateConfig()
    end
    Note over User,Device: User connects to ESP32, configures WiFi, and sets up data acquisition.